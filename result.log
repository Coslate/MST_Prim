rm -rf ../exec_output/Linked_List.o
rm -rf ../exec_output/Fibonacci_Heap.o
rm -rf ../exec_output/Prim.o
rm -rf ../exec_output/Prim_main.o
rm -rf ./tags
g++ -g -Wall -O3 -std=c++11  -c ../Linked_List_ex/Linked_List.cpp  -I ./include  -I ../Fibonacci_Heap_ex/include  -I ../Linked_List_ex/include -o ../exec_output/Linked_List.o
g++ -g -Wall -O3 -std=c++11  -c ../Fibonacci_Heap_ex/Fibonacci_Heap.cpp  -I ./include  -I ../Fibonacci_Heap_ex/include  -I ../Linked_List_ex/include -o ../exec_output/Fibonacci_Heap.o
g++ -g -Wall -O3 -std=c++11  -c Prim.cpp  -I ./include  -I ../Fibonacci_Heap_ex/include  -I ../Linked_List_ex/include -o ../exec_output/Prim.o
/usr/local/bin/ctags -R ./*
/usr/local/bin/ctags -a ./include/* -a ../Fibonacci_Heap_ex/* -a ../Fibonacci_Heap_ex/include/* -a ../Linked_List_ex/* -a ../Linked_List_ex/include/*
g++ -g -Wall -O3 -std=c++11   -I ./include  -I ../Fibonacci_Heap_ex/include  -I ../Linked_List_ex/include ../exec_output/Linked_List.o ../exec_output/Fibonacci_Heap.o ../exec_output/Prim.o Prim_main.cpp -o ../exec_output/Prim_main.o
../exec_output/Prim_main.o
-----------------LinkedListNode-----------------
node_a = (2147483647, 0x7fe03b403270)
node_b = (2147483647, 0x7fe03b4032a0)
node_h = (2147483647, 0x7fe03b4032d0)
node_i = (2147483647, 0x7fe03b403300)
node_c = (2147483647, 0x7fe03b403330)
node_g = (2147483647, 0x7fe03b403370)
node_f = (2147483647, 0x7fe03b4033a0)
node_d = (2147483647, 0x7fe03b4033d0)
node_e = (2147483647, 0x7fe03b403400)
----------------All node-----------------
all_node = [a, b, h, i, c, g, f, d, e]
-----------------FTNode-----------------
node_a_fib = (2147483647, 0x7fe03b403510)
node_b_fib = (2147483647, 0x7fe03b403560)
node_h_fib = (2147483647, 0x7fe03b4035b0)
node_i_fib = (2147483647, 0x7fe03b403600)
node_c_fib = (2147483647, 0x7fe03b403650)
node_g_fib = (2147483647, 0x7fe03b4036a0)
node_f_fib = (2147483647, 0x7fe03b4036f0)
node_d_fib = (2147483647, 0x7fe03b403740)
node_e_fib = (2147483647, 0x7fe03b403790)
-----------------map_node_ll2ft-----------------
map_node_ll2ft[0x7fe03b403270] = (2147483647, 0x7fe03b403510)
map_node_ll2ft[0x7fe03b4032a0] = (2147483647, 0x7fe03b403560)
map_node_ll2ft[0x7fe03b4032d0] = (2147483647, 0x7fe03b4035b0)
map_node_ll2ft[0x7fe03b403300] = (2147483647, 0x7fe03b403600)
map_node_ll2ft[0x7fe03b403330] = (2147483647, 0x7fe03b403650)
map_node_ll2ft[0x7fe03b403370] = (2147483647, 0x7fe03b4036a0)
map_node_ll2ft[0x7fe03b4033a0] = (2147483647, 0x7fe03b4036f0)
map_node_ll2ft[0x7fe03b4033d0] = (2147483647, 0x7fe03b403740)
map_node_ll2ft[0x7fe03b403400] = (2147483647, 0x7fe03b403790)
-----------------map_node_ft2ll-----------------
map_node_ft2ll[0x7fe03b403510] = (2147483647, 0x7fe03b403270)
map_node_ft2ll[0x7fe03b403560] = (2147483647, 0x7fe03b4032a0)
map_node_ft2ll[0x7fe03b4035b0] = (2147483647, 0x7fe03b4032d0)
map_node_ft2ll[0x7fe03b403600] = (2147483647, 0x7fe03b403300)
map_node_ft2ll[0x7fe03b403650] = (2147483647, 0x7fe03b403330)
map_node_ft2ll[0x7fe03b4036a0] = (2147483647, 0x7fe03b403370)
map_node_ft2ll[0x7fe03b4036f0] = (2147483647, 0x7fe03b4033a0)
map_node_ft2ll[0x7fe03b403740] = (2147483647, 0x7fe03b4033d0)
map_node_ft2ll[0x7fe03b403790] = (2147483647, 0x7fe03b403400)
-----------------map_node_st2ll-----------------
map_node_st2ll[a] = (2147483647, 0x7fe03b403270)
map_node_st2ll[b] = (2147483647, 0x7fe03b4032a0)
map_node_st2ll[h] = (2147483647, 0x7fe03b4032d0)
map_node_st2ll[i] = (2147483647, 0x7fe03b403300)
map_node_st2ll[c] = (2147483647, 0x7fe03b403330)
map_node_st2ll[g] = (2147483647, 0x7fe03b403370)
map_node_st2ll[f] = (2147483647, 0x7fe03b4033a0)
map_node_st2ll[d] = (2147483647, 0x7fe03b4033d0)
map_node_st2ll[e] = (2147483647, 0x7fe03b403400)
-----------------Set Adjacent List of Graph(V, E)-----------------
-----------------AdjList::PrintAdjList, node_a-----------------
[4 8]
[b h]
[0x7fe03b403cb0 0x7fe03b403e60]
first = 0x7fe03b403cb0
last = 0x7fe03b403e60
map_weight[a] = [4(0x7fe03b403270, 0x7fe03b4032a0), 8(0x7fe03b403270, 0x7fe03b4032d0)]
-----------------AdjList::PrintAdjList, node_b-----------------
[4 8 11]
[a c h]
[0x7fe03b403da0 0x7fe03b404000 0x7fe03b404120]
first = 0x7fe03b403da0
last = 0x7fe03b404120
map_weight[b] = [4(0x7fe03b4032a0, 0x7fe03b403270), 8(0x7fe03b4032a0, 0x7fe03b403330), 11(0x7fe03b4032a0, 0x7fe03b4032d0)]
-----------------AdjList::PrintAdjList, node_h-----------------
[8 11 1 7]
[a b g i]
[0x7fe03b403ed0 0x7fe03b4041a0 0x7fe03b4041f0 0x7fe03b404360]
first = 0x7fe03b403ed0
last = 0x7fe03b404360
map_weight[h] = [8(0x7fe03b4032d0, 0x7fe03b403270), 11(0x7fe03b4032d0, 0x7fe03b4032a0), 1(0x7fe03b4032d0, 0x7fe03b403370), 7(0x7fe03b4032d0, 0x7fe03b403300)]
-----------------AdjList::PrintAdjList, node_c-----------------
[8 2 7 4]
[b i d f]
[0x7fe03b404070 0x7fe03b4046e0 0x7fe03b4047b0 0x7fe03b404900]
first = 0x7fe03b404070
last = 0x7fe03b404900
map_weight[c] = [8(0x7fe03b403330, 0x7fe03b4032a0), 2(0x7fe03b403330, 0x7fe03b403300), 7(0x7fe03b403330, 0x7fe03b4033d0), 4(0x7fe03b403330, 0x7fe03b4033a0)]
-----------------AdjList::PrintAdjList, node_i-----------------
[7 6 2]
[h g c]
[0x7fe03b4043d0 0x7fe03b404690 0x7fe03b404730]
first = 0x7fe03b4043d0
last = 0x7fe03b404730
map_weight[i] = [7(0x7fe03b403300, 0x7fe03b4032d0), 6(0x7fe03b403300, 0x7fe03b403370), 2(0x7fe03b403300, 0x7fe03b403330)]
-----------------AdjList::PrintAdjList, node_g-----------------
[1 2 6]
[h f i]
[0x7fe03b404290 0x7fe03b403fb0 0x7fe03b404610]
first = 0x7fe03b404290
last = 0x7fe03b404610
map_weight[g] = [1(0x7fe03b403370, 0x7fe03b4032d0), 2(0x7fe03b403370, 0x7fe03b4033a0), 6(0x7fe03b403370, 0x7fe03b403300)]
-----------------AdjList::PrintAdjList, node_d-----------------
[7 14 9]
[c f e]
[0x7fe03b404850 0x7fe03b404a20 0x7fe03b404bd0]
first = 0x7fe03b404850
last = 0x7fe03b404bd0
map_weight[d] = [7(0x7fe03b4033d0, 0x7fe03b403330), 14(0x7fe03b4033d0, 0x7fe03b4033a0), 9(0x7fe03b4033d0, 0x7fe03b403400)]
-----------------AdjList::PrintAdjList, node_e-----------------
[10 9]
[f d]
[0x7fe03b404ae0 0x7fe03b404c50]
first = 0x7fe03b404ae0
last = 0x7fe03b404c50
map_weight[e] = [10(0x7fe03b403400, 0x7fe03b4033a0), 9(0x7fe03b403400, 0x7fe03b4033d0)]
-----------------AdjList::PrintAdjList, node_f-----------------
[2 4 14 10]
[g c d e]
[0x7fe03b404560 0x7fe03b404950 0x7fe03b4049a0 0x7fe03b404a70]
first = 0x7fe03b404560
last = 0x7fe03b404a70
map_weight[f] = [2(0x7fe03b4033a0, 0x7fe03b403370), 4(0x7fe03b4033a0, 0x7fe03b403330), 14(0x7fe03b4033a0, 0x7fe03b4033d0), 10(0x7fe03b4033a0, 0x7fe03b403400)]
-----------------Prim_Algorithm::InitialSet-----------------
##################################
#########      F0      ###########
##################################
(2147483647, 0x7fe03b403560, 0  , False, b  , True)
##################################
#########      F1      ###########
##################################
(2147483647, 0x7fe03b4035b0, 0  , False, h  , True)
##################################
#########      F2      ###########
##################################
(2147483647, 0x7fe03b403600, 0  , False, i  , True)
##################################
#########      F3      ###########
##################################
(2147483647, 0x7fe03b403650, 0  , False, c  , True)
##################################
#########      F4      ###########
##################################
(2147483647, 0x7fe03b4036a0, 0  , False, g  , True)
##################################
#########      F5      ###########
##################################
(2147483647, 0x7fe03b4036f0, 0  , False, f  , True)
##################################
#########      F6      ###########
##################################
(2147483647, 0x7fe03b403740, 0  , False, d  , True)
##################################
#########      F7      ###########
##################################
(2147483647, 0x7fe03b403790, 0  , False, e  , True)
##################################
#########      F8      ###########
##################################
(0  , 0x7fe03b403510, 0  , False, a  , True)
-----------------Prim_Algorithm::FindMST-----------------
Warning : New key is greater than current key at the node with address. No change.0x7fe03b403510
Warning : New key is greater than current key at the node with address. No change.0x7fe03b4035b0
Warning : New key is greater than current key at the node with address. No change.0x7fe03b403510
Warning : New key is greater than current key at the node with address. No change.0x7fe03b403560
Warning : The node with the address does not exist in the Fibonacci_Heap. No change.0x7fe03b4035b0
Warning : New key is greater than current key at the node with address. No change.0x7fe03b4036a0
Warning : New key is greater than current key at the node with address. No change.0x7fe03b403560
Warning : New key is greater than current key at the node with address. No change.0x7fe03b4036f0
Warning : The node with the address does not exist in the Fibonacci_Heap. No change.0x7fe03b4035b0
Warning : New key is greater than current key at the node with address. No change.0x7fe03b4036a0
Warning : The node with the address does not exist in the Fibonacci_Heap. No change.0x7fe03b403650
Warning : New key is greater than current key at the node with address. No change.0x7fe03b403650
Warning : New key is greater than current key at the node with address. No change.0x7fe03b4036f0
MST : 
( NULL -->     a, weight =     0)
(    a -->     b, weight =     4)
(    a -->     h, weight =     8)
(    h -->     g, weight =     1)
(    g -->     f, weight =     2)
(    f -->     c, weight =     4)
(    c -->     i, weight =     2)
(    c -->     d, weight =     7)
(    d -->     e, weight =     9)
minimum total edge weight = 37
-----------------Prim_Algorithm::Release-----------------
It is MST_Edge destructor.
It is MST_Edge destructor.
It is MST_Edge destructor.
It is MST_Edge destructor.
It is MST_Edge destructor.
It is MST_Edge destructor.
It is MST_Edge destructor.
It is MST_Edge destructor.
It is MST_Edge destructor.
It is Fibonacci_Heap destructor.
It is AdjList destructor.
It is LinkedList destructor.
It is LinkedList destructor.
It is LinkedList destructor.
It is LinkedList destructor.
It is LinkedList destructor.
It is LinkedList destructor.
It is LinkedList destructor.
It is LinkedList destructor.
It is LinkedList destructor.
It is LinkedList destructor.
